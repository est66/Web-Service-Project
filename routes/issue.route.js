module.exports = function(app) {

        var issues = require('../controllers/issue.controller');

        //---Relative to Unique User---
        // Create a new issue attached to a unique user
        /**
         * @api {post} /issues POST ISSUE
         * @apiName create
         * @apiGroup Issue
         * @apiVersion 1.0.0
         * @apiDescription Registers a new issue.
         *
         * @apiUse IssueInRequestBody
         * @apiUse IssueInResponseBody
         * @apiUse IssueValidationError
         * @apiSuccess (Response body) {String} id A unique identifier for the issue generated by the server
         *
         * @apiExample Example
         *     POST /issues HTTP/1.1
         *     Content-Type: application/json
         *
         *     {
         * 
         *       "uid": "58b2926f5e1def0123e97bc0",            
         *       "description": "Dégradation sur la voie public",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55865.jpg",
         *       "latitude": "46.7833",
         *       "longitude": "6.65",
         *       "tags": ["accident","broken"]
         * 
         *     }
         *
         * @apiSuccessExample 201 Created
         *     HTTP/1.1 201 Created
         *     Content-Type: application/json
         *     Location: https://comem-webserv-2018h.herokuapp.com/issues/6n16werg6nrw61eqr6f1498v
         *
         *     {
         *       "_id": "6n16werg6nrw61eqr6f1498v",
         *       "uid": "58b2926f5e1def0123e97bc0",
         *       "status": "new",
         *       "description": "Dégradation sur la voie public",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55865.jpg",
         *       "latitude": "46.7833",
         *       "longitude": "6.65",
         *       "tags": ["accident","broken"],
         *       "createdAt": "2018-01-01T14:31:87.000Z,
         *       "updatedAt": "2018-01-01T14:31:87.000Z
         *     }
         */
        app.post('/issues', issues.create);

        //---Not relative to Users---
        // Retrieve all issues and filter by user
        /**
         * @api {get} /issues GET ISSUES
         * @apiName findAllAndFilter
         * @apiGroup Issue
         * @apiVersion 1.0.0
         * @apiDescription Retrieves a paginated list of issue.
         *
         * @apiUse IssueInResponseBody
         * @apiUse Pagination
         *
         * @apiParam (URL query parameters) {String} [uid] Select only issue with a specific ID
         * @apiParam (URL query parameters) {String} [status] Select only issue with a specific status
         * 
         * @apiExample Example
         *     GET /issues?uid=as2ik3l4losdfikemr24&page=2&pageSize=50&status=inProgress HTTP/1.1
         *
         * @apiSuccessExample 200 OK
         *     HTTP/1.1 200 OK
         *     Content-Type: application/json
         *     Link: &lt;https://comem-webserv-2018h.herokuapp.com/issues?uid=as2ik3l4losdfikemr24&page=2&pageSize=50&status=inProgress; rel="first prev"
         *
         *     [
         *       {
         *       "_id": "6n16werg6nrw61eqr6f1498v",
         *       "uid": "58b2926f5e1def0123e97bc0",
         *       "status": "new",
         *       "description": "Dégradation sur la voie public",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55865.jpg",
         *       "latitude": "46.7833",
         *       "longitude": "6.65",
         *       "tags": ["accident","broken"],
         *       "createdAt": "2018-01-01T14:31:87.000Z,
         *       "updatedAt": "2018-01-01T14:31:87.000Z
         *       },
         *       {
         *       "_id": "sdvrkm234kewefmk34k654ktf",
         *       "uid": "58b2926f5e1def0123e97bc0",
         *       "status": "inProgress",
         *       "description": "Dégradation sur la voie public encore uen fois",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55365.jpg",
         *       "latitude": "46.7832",
         *       "longitude": "6.64",
         *       "tags": ["accident","broken"],
         *       "createdAt": "2018-02-01T14:31:87.000Z,
         *       "updatedAt": "2018-02-01T14:31:87.000Z
         *       }
         *     ]
         */
        app.get('/issues', issues.findAllAndFilter);

        // Retrieve a single issue with id
        /**
         * @api {get} /issues/:id GET ISSUE
         * @apiName findOne
         * @apiGroup Issue
         * @apiVersion 1.0.0
         * @apiDescription Retrieves one issue.
         *
         * @apiUse IssueIdInUrlPath
         * @apiUse IssueInResponseBody
         * @apiUse IssueNotFoundError
         *
         * @apiExample Example
         *     GET /issues/6n16werg6nrw61eqr6f1498v HTTP/1.1
         *
         * @apiSuccessExample 200 OK
         *     HTTP/1.1 200 OK
         *     Content-Type: application/json
         *
         *      {
         *       "_id": "6n16werg6nrw61eqr6f1498v",
         *       "uid": "58b2926f5e1def0123e97bc0",
         *       "status": "new",
         *       "description": "Dégradation sur la voie public",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55865.jpg",
         *       "latitude": "46.7833",
         *       "longitude": "6.65",
         *       "tags": ["accident","broken"],
         *       "createdAt": "2018-01-01T14:31:87.000Z,
         *       "updatedAt": "2018-01-01T14:31:87.000Z
         *       },
         */
        app.get('/issues/:id', issues.findOne);

        // Update of issue with id and body data (partial update) 
        /**
         * @api {put} /issues/:id UPDATE ISSUE
         * @apiName updateFields
         * @apiGroup Issue
         * @apiVersion 1.0.0
         * @apiDescription Partially updates a issue's data (only the properties found in the request body will be updated).
         * All properties are optional.
         *
         * @apiUse IssueIdInUrlPath
         * @apiUse IssueInRequestBody
         * @apiUse IssueInResponseBody
         * @apiUse IssueNotFoundError
         * @apiUse IssueValidationError
         *
         * @apiExample Example
         *     PUT /issues/6n16werg6nrw61eqr6f1498v HTTP/1.1
         *     Content-Type: application/json
         *
         *     {
         *       "description": "Dégradation du mur de l'école",
         *       "tags": ["grafiti","wall","school"]
         *     }
         *
         * @apiSuccessExample 200 OK
         *     HTTP/1.1 200 OK
         *     Content-Type: application/json
         *
         *     {
         *       "_id": "6n16werg6nrw61eqr6f1498v",
         *       "uid": "58b2926f5e1def0123e97bc0",
         *       "status": "new",
         *       "description": "Dégradation du mur de l'école",
         *       "imageUrl": "https://comem-webserv-2018h.herokuapp.com/public/images/img55865.jpg",
         *       "latitude": "46.7833",
         *       "longitude": "6.65",
         *       "tags": ["grafiti","wall","school"],
         *       "createdAt": "2018-01-01T14:31:87.000Z,
         *       "updatedAt": "2018-01-01T14:31:87.000Z
         *     }
         */
        app.put('/issues/:id', issues.updateFields);

        // Delete an issue with id
        /**
         * @api {delete} /issues/:id DELETE ISSUE
         * @apiName delete
         * @apiGroup Issue
         * @apiVersion 1.0.0
         * @apiDescription Permanently deletes a issue.
         *
         * @apiUse IssueIdInUrlPath
         * @apiUse IssueNotFoundError
         *
         * @apiExample Example
         *     DELETE /issues/58b2926f5e1def0123e97bc0 HTTP/1.1
         *
         * @apiSuccessExample 204 No Content
         *     HTTP/1.1 204 No Content
         */
        app.delete('/issues/:id', issues.delete);
    }
    //      -------- API DOCS DEFINE ---------
    /**
     * @apiDefine IssueIdInUrlPath
     * @apiParam (URL path parameters) {String} id The unique identifier of the issue to retrieve
     */

/**
 * @apiDefine IssueInRequestBody
 * @apiParam (Request body) {String} issue.uid Id of user that reported the issue
 * @apiParam (Request body) {String="new","inProgress","canceled","completed"} issue.status Status of the issue
 * @apiParam (Request body) {String{..1000}}  issue.description  Description of the issue (Optional)
 * @apiParam (Request body) {String{..500}}  issue.imageUrl  Image Url of the issue (Optional)
 * @apiParam (Request body) {Number} issue.latitude   Latitude of the issue
 * @apiParam (Request body) {Number} issue.longitude   Longitude of the issue
 * @apiParam (Request body) {String[]} issue.tags   Array of tags of the issue
 */

/**
 * @apiDefine IssueInResponseBody
 * @apiSuccess {String} issue.uid Id of user that reported the issue
 * @apiSuccess {String} issue.status Status of the issue
 * @apiSuccess {String} issue.description  Description of the issue
 * @apiSuccess {String} issue.imageUrl  Image Url of the issue
 * @apiSuccess {Number} issue.latitude   Latitude of the issue
 * @apiSuccess {Number} issue.longitude   Longitude of the issue
 * @apiSuccess {String} issue.tags   Array of tags of the issue
 * @apiSuccess {Date} issue.createdAt   Creation date of the issue
 * @apiSuccess {Date} issue.updatedAt   Updated date of the issue
 */

/**
 * @apiDefine IssueNotFoundError
 *
 * @apiError {Object} 404/NotFound No issue was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No issue found with ID 58b2926f5e1def0123e97bc0
 */

/**
 * @apiDefine IssueValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the issue's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Issue validation failed",
 *       "errors": {
 *         "gender": {
 *           "kind": "enum",
 *           "message": "`foo` is not a valid enum value for path `gender`.",
 *           "name": "ValidatorError",
 *           "path": "gender",
 *           "properties": {
 *             "enumValues": [
 *               "male",
 *               "female"
 *             ],
 *             "message": "`{VALUE}` is not a valid enum value for path `{PATH}`.",
 *             "path": "gender",
 *             "type": "enum",
 *             "value": "foo"
 *           },
 *           "value": "foo"
 *         }
 *       }
 *     }
 */